S : ((STATEMENT | BLOCK | BLOCK_TEXT | COMMENT) NEWLINE)*;

BLOCK : VARIABLE '(' (STATEMENT (',' STATEMENT)*)? '){' NEWLINE
	((STATEMENT | BLOCK | COMMENT) NEWLINE)*
	NEWLINE '}';
BLOCK_TEXT : VARIABLE '(defTextBlock,def_blockLen=' I_VALUE (',' STATEMENT)* '){' NEWLINE TEXT NEWLINE '}';
	
STATEMENT : VARIABLE '=' VALUE;

COMMENT : '//' WORD;

VALUE : (I_VALUE | F_VALUE | B_VALUE | S_VALUE);
I_VALUE : NUMBER+;
F_VALUE : NUMBER+ ('.' NUMBER*)? 'f';
B_VALUE : 'true' | 'false';
S_VALUE : '\'' (WORD SPACE?)* '\'';

TEXT : ((~[])* (SPACE | NEWLINE)?)*;
WORD : (LITERAL | NUMBER | SPEC_CHAR)+;
VARIABLE : (LITERAL | NUMBER | SPEC_CHAR_VAR)+;

LITERAL : [A-Z] | [a-z];
NUMBER : [0..9];
SPEC_CHAR : ~('\'' | NEWLINE);
SPEC_CHAR_VAR : '$' | '&' | '_';

NEWLINE : '\n';
SPACE : ' ';